{
    "ProjectList":[

        {
            "ProjectTags":["web", "main"],
            "Order":null,
            "Omit":false,
            "Title":"Secret Santa",
            "Headline":".NET 8 based project for organising \"Secret Santa\" like events.",
            "Tags":[".NET 8", "ASP.NET Core 8", "C#", "Entity Framework", "SQL", "SQL Server", "ASP.NET Core Identity", "Razor", "Blazor", "Blazor SSR", "WebAssembly", "Rest API", "git", "JSON", "JWT", "xUnit", "Unit Testing", "Docker"],
            "Body":"Designed with specific first hand experiences in mind, users with an account can create a \"Secret Santa\" type event, providing emails which will be used to send invitations. Recipients can then register and choose to participate. When the event is drawn, the chosen name and email of each participating user's randomly chosen \"Secret Santa\" will be emailed to them.",
            "OldBody":"Users can register for an account (using ASP.NET Core Identity) and link additional email addresses to this after email verification (I designed this with specific users/first hand experiences in mind, where the lack of such a feature would likely lead to them not participating). Users can create a \"Secret Santa\" type event, which involves adding a name and welcome message for the event, and the emails of those you wish to invite, and giving \"organiser\" status to any additional users who should be able to add more emails/make changes. The invitations can then be sent (if a real email sending service was hooked up to the provided interface), and recipients can then register and choose whether they want to participate or not, providing a display name and email address. The event can then be drawn, and the randomly chosen individualised \"Secret Santa\" name will be sent out by email to everyone participating. Additionally, these events can be made public, and, accessed by web link, free for anyone to add their own email to, pending verification if desired.",
            "Links":null
        },

        {
            "ProjectTags":["web", "main"],
            "Order":null,
            "Omit":false,
            "Title":"Famicom Disk Tool",
            "Headline":"A React powered browser based management tool for the 2.8-inch floppy QuickDisks/drive used by Nintendo's Japan-only Famicom disk system",
            "Tags":["React", "JavaScript", "JSON", "HTML", "CSS", "Web Serial API", "Arduino/AVR", "C++", "Assembly", "Web Design", "git" ],
            "Body":"Allows for reading, writing, cataloguing/identifying and modifying disk images. Browser based interface made in React, communication with Famicom disk drive over Web Serial API (supported by Chrome), connecting via USB to Arduino with embedded software written in C++/AVR Assembly.",
            "Images":["fds1.jpg","fds2.jpg","fds3.jpg"],
            "Links":[{"url":"https://tcbarker.github.io/FamicomDiskTool/"}]
        },

        {
            "ProjectTags":["web", "main"],
            "Order":null,
            "Omit":false,
            "Title":"Ultimate Pizza Co. Restaurant Website",
            "Headline":"React frontend based restaurant menu/ordering app for a fictitious restaurant, with Node.js/Express/MySQL/Prisma backend.",
            "Tags":["React", "JavaScript", "JSON", "HTML", "CSS", "TypeScript", "Node.js", "Express.js", "SQL", "MySQL", "Prisma ORM", "git", "Docker", "bcrypt", "CORS", "Web Design"],
            "Body":"This was the first major modern web project that I completed while learning React. It has an \"interesting\" API... Some sort of attempt to invent GraphQL without knowing that it existed, or knowing of the term \"RESTful API\".",
            "Links":null
        },

        {
            "ProjectTags":["web", "main"],
            "Order":null,
            "Omit":false,
            "Title":"Online Pool",
            "Headline":"Web browser based version of the classic cue sports game \"Pool\", allowing remote multiplayer through shared URLs",
            "Tags":["JavaScript", "Three.js", "WebGL", "Physics Engine", "Cryptography", "Gamepad API", "git", "CSS" ],
            "Body":"Rendered in 3d using WebGL (through Three.js), using the Rapier physics library for game physics.",
            "Images":["tpt1.png","tpt2.png"],
            "Links":[{"url":"https://tcbarker.github.io/TPT/"},{"url":"https://github.com/tcbarker/TPT","Name":"Github"}]
        },

        {
            "ProjectTags":["web", "main"],
            "Order":null,
            "Omit":false,
            "Title":"Famicom/NES Emulator",
            "Headline":"Web browser based emulator for the first Nintendo video game console, written in C++ and compiled here to WASM using Emscripten.",
            "Tags":["C++", "6502", "Emscripten", "WebAssembly", "Web Audio API", "Gamepad API", "JavaScript", "Emulation", "git" ],
            "Body":"Emulated are: Ricoh 2A03 CPU (featuring MOS 6502 CPU core, Input (and a few input devices), Audio Generator, DMA/IRQ units), Ricoh 2C02 PPU graphics chip, their respective busses, and a small selection of the so called \"mappers\" that can connect to these.",
            "Images":["nes1.png","nes2.png"],
            "Links":[{"url":"https://tcbarker.github.io/NESWASM/"},{"url":"https://github.com/tcbarker/NESWASM","Name":"Github"}]
        },

        {
            "ProjectTags":["web", "small"],
            "Order":null,
            "Omit":false,
            "Title":"Spelling Test",
            "Headline":"Web browser based spelling test.",
            "Tags":["JavaScript", "JSON", "Web Speech API", "git" ],
            "Body":"This was created over a very short timeframe to help my son prepare for his year 6 SATs exam. Uses Web Speech API (note that some browsers have more human sounding synthesis than others...) to read word and example of its use. Uses normal text input with spelling suggestions disabled, but this doesn't prevent mobile input's spelling/autocomplete, so use on a computer is recomended.",
            "Links":[{"url":"https://tcbarker.github.io/SpellingTest/"},{"url":"https://github.com/tcbarker/SpellingTest", "Name":"Github"}]
        },

        {
            "ProjectTags":["web", "small"],
            "Order":null,
            "Omit":false,
            "Title":"PlayStation Memory Card Manager",
            "Headline":"Web browser based PS1 memory card image manager.",
            "Tags":["JavaScript", "HTML Canvas API", "git" ],
            "Body":"Allows users to load PS1 memory card or single save image files in a variety of formats, including raw and exports from PlayStation 3, view the files contained within these, and the text/graphical information within each. These are automatically compared against all other save files that have been loaded in order to determine duplicate files. Adding file copying/export, and saving all icons out to .png, and a better UI, would be easy, but aren't on my list of priorities.",
            "Links":[{"url":"https://tcbarker.github.io/PS1MemoryCard/"},{"url":"https://github.com/tcbarker/PS1MemoryCard","Name":"Github"}]
        },

        {
            "ProjectTags":["non-web", "main"],
            "Order":null,
            "Omit":false,
            "Title":"Doctor Who: The Adventure Games - The Gunpowder Plot",
            "Collaborative":true,
            "Headline":"Commercial video game product commissioned by the BBC (from Sumo Digital) to compliment their popular Doctor Who series.",
            "Tags":["Industry/Team", "Lua", "Perforce", "Sound Design/Editing"],
            "Body":"One of a number of collaborative projects that I worked on during my time in the games industry - all of which used bug databases, task tracking software, and version control (Perforce, Alienbrain). My responsibilities were sound design/editing, and the implementation of these sounds within the game world and events, realized through the use of Lua scripting.",
            "Images":["tgp1.jpg"],
            "Links":[{"url":"https://www.imdb.com/title/tt2106396/"}]
        },

        {
            "ProjectTags":["non-web", "main"],
            "Order":null,
            "Omit":false,
            "Title":"Naughty Cats & Cross Dogs",
            "Collaborative":true,
            "Headline":"A fun take on noughts and crosses for Android, released on the Google store and Amazon Appstore.",
            "Tags":["Unity3d", "C#", "Android", "Sound Design/Editing", "Game Design", "git" ],
            "Body":"A hobby game project two person collaboration using Unity3d.",
            "Images":["nc1.png","nc2.png","nc3.png"],
            "Links":[{"url":"https://www.amazon.co.uk/Boot-Room-Naughty-Cats-Cross/dp/B07DXCV11L/"}]
        },

        {
            "ProjectTags":["non-web", "main"],
            "Order":null,
            "Omit":false,
            "Title":"Game Engine",
            "Headline":"A simple game engine.",
            "Tags":["C++", "XML", "JSON", "OpenGL", "GLSL", "Lua", "SDL2", ".Obj (Wavefront)", "DSP", "git" ],
            "Body":"A component based game engine featuring keyboard/controller input (through SDL2), Lua scripting integration, 2d collision, rendering via OpenGL using programmable GLSL shaders, tile based pixel 2d rendering, 2d animation system, GUI, rudimentary software 3d perspective/orthographic/matrix rendering, particle system, basic audio playback (SDL2 audio stream callback) including support for effects, filtering, JSON/XML/CSV parsers, logging. (and probably more that I've forgotten)",
            "Images":["tge1.png","tge2.png"],
            "Links":null
        },

        {
            "ProjectTags":["web", "small"],
            "Order":null,
            "Omit":false,
            "Title":"Blender Exporter",
            "Headline":"An exporter, written in Python, for solid-coloured Blender 3d models.",
            "Tags":["Python", "Blender", "git" ],
            "Body":"Exports Blender models, converting to one single material (adding and populating a colour channel to all vertices), from several materials each with single defined colours (which is a much simpler workflow for artists working within blender). This can then be used in a game engine with a shader that has been written to use vertex colours.",
            "Links":null
        }
    ]
}



